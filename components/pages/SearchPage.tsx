'use client'

import React, { useState } from 'react'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { MovieCard } from '@/components/ui/MovieCard'
import { Search, Filter, SlidersHorizontal, User, Globe, Calendar, Film } from 'lucide-react'
import { Card, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'

export function SearchPage() {
    const [searchQuery, setSearchQuery] = useState('')
    const [searchType, setSearchType] = useState('all')
    const [selectedGenre, setSelectedGenre] = useState('all')
    const [selectedCountry, setSelectedCountry] = useState('all')
    const [selectedYear, setSelectedYear] = useState('all')
    const [selectedLanguage, setSelectedLanguage] = useState('all')
    const [sortBy, setSortBy] = useState('modified_time')
    const [sortType, setSortType] = useState('desc')

    // Mock search results
    const searchResults = [
        {
            id: 1,
            title: "Ng√¥i Tr∆∞·ªùng X√°c S·ªëng",
            poster: "https://image.tmdb.org/t/p/w500/1g0dhYtq4irTY1GPXvft6k4YLjm.jpg",
            rating: 8.2,
            year: 2022,
            genres: ["H√†nh ƒë·ªông", "Kinh d·ªã"],
            description: "M·ªôt tr∆∞·ªùng c·∫•p ba tr·ªü th√†nh ƒëi·ªÉm b√πng ph√°t virus th√¢y ma...",
            duration: "65 ph√∫t/t·∫≠p"
        },
        {
            id: 2,
            title: "B·∫°n Trai T√¥i L√† H·ªì Ly",
            poster: "https://image.tmdb.org/t/p/w500/2g0dhYtq4irTY1GPXvft6k4YLjm.jpg",
            rating: 8.3,
            year: 2020,
            genres: ["T√¨nh c·∫£m", "Th·∫ßn tho·∫°i"],
            description: "C√¢u chuy·ªán t√¨nh y√™u gi·ªØa con ng∆∞·ªùi v√† h·ªì ly ch√≠n ƒëu√¥i...",
            duration: "70 ph√∫t/t·∫≠p"
        },
        // Add more mock results...
    ]

    const searchTypes = [
        { value: 'all', label: 'üîç T·∫•t c·∫£', icon: Search },
        { value: 'title', label: 'üé¨ T√™n phim', icon: Film },
        { value: 'actor', label: 'üë§ Di·ªÖn vi√™n', icon: User },
        { value: 'director', label: 'üé≠ ƒê·∫°o di·ªÖn', icon: User },
        { value: 'keyword', label: 'üè∑Ô∏è T·ª´ kh√≥a', icon: Search },
    ]

    const genres = [
        { value: 'all', label: 'T·∫•t c·∫£ th·ªÉ lo·∫°i' },
        { value: 'hanh-dong', label: 'üí• H√†nh ƒë·ªông' },
        { value: 'hai-huoc', label: 'üòÇ H√†i h∆∞·ªõc' },
        { value: 'chinh-kich', label: 'üé≠ Ch√≠nh k·ªãch' },
        { value: 'kinh-di', label: 'üëª Kinh d·ªã' },
        { value: 'tinh-cam', label: 'üíï T√¨nh c·∫£m' },
        { value: 'vien-tuong', label: 'üöÄ Vi·ªÖn t∆∞·ªüng' },
        { value: 'phieu-luu', label: 'üó∫Ô∏è Phi√™u l∆∞u' },
        { value: 'vo-thuat', label: 'ü•ã V√µ thu·∫≠t' },
        { value: 'than-thoai', label: '‚ú® Th·∫ßn tho·∫°i' },
        { value: 'hoc-duong', label: 'üéì H·ªçc ƒë∆∞·ªùng' },
        { value: 'gia-dinh', label: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Gia ƒë√¨nh' },
        { value: 'tai-lieu', label: 'üìö T√†i li·ªáu' },
        { value: 'am-nhac', label: 'üéµ √Çm nh·∫°c' },
        { value: 'the-thao', label: '‚öΩ Th·ªÉ thao' },
        { value: 'chien-tranh', label: '‚öîÔ∏è Chi·∫øn tranh' },
        { value: 'lich-su', label: 'üìú L·ªãch s·ª≠' },
        { value: 'co-trang', label: 'üëò C·ªï trang' },
        { value: 'bi-an', label: 'üîç B√≠ ·∫©n' },
        { value: 'hinh-su', label: 'üöî H√¨nh s·ª±' },
        { value: 'tam-ly', label: 'üß† T√¢m l√Ω' },
    ]

    const countries = [
        { value: 'all', label: 'T·∫•t c·∫£ qu·ªëc gia' },
        { value: 'viet-nam', label: 'üáªüá≥ Vi·ªát Nam' },
        { value: 'han-quoc', label: 'üá∞üá∑ H√†n Qu·ªëc' },
        { value: 'trung-quoc', label: 'üá®üá≥ Trung Qu·ªëc' },
        { value: 'nhat-ban', label: 'üáØüáµ Nh·∫≠t B·∫£n' },
        { value: 'thai-lan', label: 'üáπüá≠ Th√°i Lan' },
        { value: 'au-my', label: 'üá∫üá∏ √Çu M·ªπ' },
        { value: 'an-do', label: 'üáÆüá≥ ·∫§n ƒê·ªô' },
        { value: 'hong-kong', label: 'üá≠üá∞ H·ªìng K√¥ng' },
        { value: 'dai-loan', label: 'üáπüáº ƒê√†i Loan' },
        { value: 'anh', label: 'üá¨üáß Anh' },
        { value: 'phap', label: 'üá´üá∑ Ph√°p' },
        { value: 'duc', label: 'üá©üá™ ƒê·ª©c' },
        { value: 'nga', label: 'üá∑üá∫ Nga' },
        { value: 'canada', label: 'üá®üá¶ Canada' },
        { value: 'uc', label: 'üá¶üá∫ √öc' },
    ]

    const years = [
        { value: 'all', label: 'T·∫•t c·∫£ nƒÉm' },
        ...Array.from({ length: 30 }, (_, i) => {
            const year = new Date().getFullYear() - i
            return { value: year.toString(), label: year.toString() }
        })
    ]

    const languages = [
        { value: 'all', label: 'T·∫•t c·∫£ ng√¥n ng·ªØ' },
        { value: 'vietsub', label: 'üáªüá≥ Vietsub' },
        { value: 'thuyet-minh', label: 'üéôÔ∏è Thuy·∫øt minh' },
        { value: 'long-tieng', label: 'üó£Ô∏è L·ªìng ti·∫øng' },
    ]

    const sortOptions = [
        { value: 'modified_time', label: 'üïí M·ªõi c·∫≠p nh·∫≠t' },
        { value: 'year', label: 'üìÖ NƒÉm ph√°t h√†nh' },
        { value: 'view', label: 'üëÅÔ∏è L∆∞·ª£t xem' },
        { value: 'rating', label: '‚≠ê ƒê√°nh gi√°' },
        { value: 'name', label: 'üî§ T√™n phim A-Z' },
    ]

    const sortTypes = [
        { value: 'desc', label: 'Gi·∫£m d·∫ßn' },
        { value: 'asc', label: 'TƒÉng d·∫ßn' },
    ]

    const handleSearch = () => {
        // Implement search logic here
        console.log('Searching with:', {
            query: searchQuery,
            type: searchType,
            genre: selectedGenre,
            country: selectedCountry,
            year: selectedYear,
            language: selectedLanguage,
            sortBy,
            sortType
        })
    }

    return (
        <div className="space-y-6 sm:space-y-8">
            {/* Search Header */}
            <div className="text-center space-y-3 sm:space-y-4">
                <h1 className="text-3xl sm:text-4xl font-bold shiny-text">T√¨m ki·∫øm phim</h1>
                <p className="text-base sm:text-lg text-muted-foreground max-w-2xl mx-auto px-4">
                    Kh√°m ph√° h√†ng ng√†n b·ªô phim v·ªõi c√¥ng c·ª• t√¨m ki·∫øm th√¥ng minh v√† ƒëa d·∫°ng
                </p>
            </div>

            {/* Search Form */}
            <Card className="border-0 bg-gradient-to-br from-card/80 via-card to-card/60 backdrop-blur-xl shadow-lg">
                <CardContent className="p-4 sm:p-6 space-y-4 sm:space-y-6">
                    {/* Search Type Selection */}
                    <div className="space-y-3">
                        <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
                            Lo·∫°i t√¨m ki·∫øm
                        </h3>
                        <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-2">
                            {searchTypes.map((type) => (
                                <Button
                                    key={type.value}
                                    variant={searchType === type.value ? "default" : "outline"}
                                    size="sm"
                                    onClick={() => setSearchType(type.value)}
                                    className={`justify-start text-xs sm:text-sm ${
                                        searchType === type.value 
                                            ? "bg-gradient-to-r from-primary to-purple-600 text-white" 
                                            : "hover:bg-accent"
                                    }`}
                                >
                                    {type.label}
                                </Button>
                            ))}
                        </div>
                    </div>

                    {/* Search Input */}
                    <div className="space-y-3">
                        <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
                            T·ª´ kh√≥a t√¨m ki·∫øm
                        </h3>
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                            <Input
                                placeholder={`Nh·∫≠p ${searchTypes.find(t => t.value === searchType)?.label.toLowerCase() || 't·ª´ kh√≥a'}...`}
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                                className="pl-10 h-11 sm:h-12 text-sm sm:text-base bg-background/50 border-border/50 focus:border-primary/50"
                                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                            />
                        </div>
                    </div>

                    {/* Advanced Filters */}
                    <div className="space-y-4">
                        <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                            <Filter className="h-4 w-4" />
                            B·ªô l·ªçc n√¢ng cao
                        </h3>
                        
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4">
                            <div className="space-y-2">
                                <label className="text-xs font-medium text-muted-foreground">Th·ªÉ lo·∫°i</label>
                                <Select value={selectedGenre} onValueChange={setSelectedGenre}>
                                    <SelectTrigger className="h-10 sm:h-11 bg-background/50 border-border/50 text-sm">
                                        <SelectValue placeholder="Ch·ªçn th·ªÉ lo·∫°i" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {genres.map((genre) => (
                                            <SelectItem key={genre.value} value={genre.value} className="text-sm">
                                                {genre.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <label className="text-xs font-medium text-muted-foreground">Qu·ªëc gia</label>
                                <Select value={selectedCountry} onValueChange={setSelectedCountry}>
                                    <SelectTrigger className="h-10 sm:h-11 bg-background/50 border-border/50 text-sm">
                                        <SelectValue placeholder="Ch·ªçn qu·ªëc gia" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {countries.map((country) => (
                                            <SelectItem key={country.value} value={country.value} className="text-sm">
                                                {country.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <label className="text-xs font-medium text-muted-foreground">NƒÉm ph√°t h√†nh</label>
                                <Select value={selectedYear} onValueChange={setSelectedYear}>
                                    <SelectTrigger className="h-10 sm:h-11 bg-background/50 border-border/50 text-sm">
                                        <SelectValue placeholder="Ch·ªçn nƒÉm" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {years.map((year) => (
                                            <SelectItem key={year.value} value={year.value} className="text-sm">
                                                {year.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <label className="text-xs font-medium text-muted-foreground">Ng√¥n ng·ªØ</label>
                                <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                                    <SelectTrigger className="h-10 sm:h-11 bg-background/50 border-border/50 text-sm">
                                        <SelectValue placeholder="Ch·ªçn ng√¥n ng·ªØ" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {languages.map((lang) => (
                                            <SelectItem key={lang.value} value={lang.value} className="text-sm">
                                                {lang.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>

                        {/* Sort Options */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                            <div className="space-y-2">
                                <label className="text-xs font-medium text-muted-foreground">S·∫Øp x·∫øp theo</label>
                                <Select value={sortBy} onValueChange={setSortBy}>
                                    <SelectTrigger className="h-10 sm:h-11 bg-background/50 border-border/50 text-sm">
                                        <SelectValue placeholder="Ch·ªçn c√°ch s·∫Øp x·∫øp" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {sortOptions.map((option) => (
                                            <SelectItem key={option.value} value={option.value} className="text-sm">
                                                {option.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <label className="text-xs font-medium text-muted-foreground">Th·ª© t·ª±</label>
                                <Select value={sortType} onValueChange={setSortType}>
                                    <SelectTrigger className="h-10 sm:h-11 bg-background/50 border-border/50 text-sm">
                                        <SelectValue placeholder="Ch·ªçn th·ª© t·ª±" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {sortTypes.map((type) => (
                                            <SelectItem key={type.value} value={type.value} className="text-sm">
                                                {type.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>
                    </div>

                    {/* Search Button */}
                    <Button 
                        onClick={handleSearch}
                        className="w-full h-11 sm:h-12 text-sm sm:text-base bg-gradient-to-r from-primary to-purple-600 hover:from-primary/90 hover:to-purple-600/90 font-semibold"
                    >
                        <Search className="h-4 w-4 mr-2" />
                        T√¨m ki·∫øm phim
                    </Button>
                </CardContent>
            </Card>

            {/* Active Filters */}
            {(searchQuery || selectedGenre !== 'all' || selectedCountry !== 'all' || selectedYear !== 'all' || selectedLanguage !== 'all') && (
                <Card className="border-0 bg-muted/30">
                    <CardContent className="p-4">
                        <div className="flex flex-wrap items-center gap-2">
                            <span className="text-sm font-medium text-muted-foreground">B·ªô l·ªçc ƒëang √°p d·ª•ng:</span>
                            {searchQuery && (
                                <Badge variant="secondary" className="text-xs">
                                    T·ª´ kh√≥a: {searchQuery}
                                </Badge>
                            )}
                            {selectedGenre !== 'all' && (
                                <Badge variant="secondary" className="text-xs">
                                    {genres.find(g => g.value === selectedGenre)?.label}
                                </Badge>
                            )}
                            {selectedCountry !== 'all' && (
                                <Badge variant="secondary" className="text-xs">
                                    {countries.find(c => c.value === selectedCountry)?.label}
                                </Badge>
                            )}
                            {selectedYear !== 'all' && (
                                <Badge variant="secondary" className="text-xs">
                                    NƒÉm {selectedYear}
                                </Badge>
                            )}
                            {selectedLanguage !== 'all' && (
                                <Badge variant="secondary" className="text-xs">
                                    {languages.find(l => l.value === selectedLanguage)?.label}
                                </Badge>
                            )}
                        </div>
                    </CardContent>
                </Card>
            )}

            {/* Search Results */}
            <div className="space-y-6">
                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                    <h2 className="text-xl sm:text-2xl font-bold">
                        K·∫øt qu·∫£ t√¨m ki·∫øm {searchQuery && `cho "${searchQuery}"`}
                    </h2>
                    <div className="flex items-center gap-2 text-muted-foreground">
                        <SlidersHorizontal className="h-4 w-4" />
                        <span className="text-sm">T√¨m th·∫•y {searchResults.length} k·∫øt qu·∫£</span>
                    </div>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4 sm:gap-6">
                    {searchResults.map((movie) => (
                        <MovieCard key={movie.id} movie={movie} />
                    ))}
                </div>

                {/* No Results */}
                {searchResults.length === 0 && (
                    <div className="text-center py-12">
                        <div className="text-6xl mb-4">üîç</div>
                        <h3 className="text-xl font-semibold mb-2">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</h3>
                        <p className="text-muted-foreground">
                            H√£y th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a ho·∫∑c b·ªô l·ªçc ƒë·ªÉ t√¨m ki·∫øm phim kh√°c
                        </p>
                    </div>
                )}
            </div>
        </div>
    )
}